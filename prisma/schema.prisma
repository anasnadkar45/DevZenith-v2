// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @unique
  email              String
  firstName          String
  lastName           String
  profileImage       String
  role               Role                @default(USER)
  resource           Resource[]
  createdSquads      Squad[]
  SquadPosts         SquadPost[]
  Vote               Vote[]
  Comment            Comment[]
  Projects           Project[]
  MembershipRequests MembershipRequest[]
  ProjectResources   ProjectResource[]
  ProjectMemberships ProjectMembership[]
  tasks              Task[]
  rooms              Room[]
  meetings           ProjectMeet[]
  jobs               Job[]
}

model Resource {
  id          String        @id @default(uuid())
  name        String
  description String
  image       String
  url         String
  category    CategoryTypes
  createdAt   DateTime      @default(now())
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model Squad {
  id          String      @id @default(uuid())
  name        String
  username    String      @unique
  image       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  SquadPosts  SquadPost[]
}

model SquadPost {
  id            String    @id @default(uuid())
  title         String
  description   Json?
  thumbnail     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Squad         Squad?    @relation(fields: [squadUsername], references: [username])
  squadUsername String?
  User          User?     @relation(fields: [userId], references: [id])
  userId        String?
  Vote          Vote[]
  Comment       Comment[]
}

model Vote {
  id          String     @id @default(uuid())
  SquadPost   SquadPost? @relation(fields: [squadPostId], references: [id])
  squadPostId String?
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  voteType    TypeOfVote
}

model Comment {
  id          String     @id @default(uuid())
  text        String
  createdAt   DateTime   @default(now())
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  SquadPost   SquadPost? @relation(fields: [squadPostId], references: [id])
  squadPostId String?
}

model Project {
  id                 String              @id @default(uuid())
  name               String
  description        String
  logo               String?
  url                String
  tags               String[]            @default([])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  User               User?               @relation(fields: [userId], references: [id])
  userId             String?
  MembershipRequests MembershipRequest[]
  ProjectResources   ProjectResource[]
  ProjectMemberships ProjectMembership[]
  tasks              Task[]
  meetings           ProjectMeet[]
}

model MembershipRequest {
  id        String        @id @default(uuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Project   Project?      @relation(fields: [projectId], references: [id])
  projectId String?
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
}

model ProjectResource {
  id        String   @id @default(uuid())
  name      String
  category  String
  link      String?
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String
  priority    String
  type        String
  date        DateTime?
  status      TaskStatus @default(TODO) // Add status field here
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

model ProjectMeet {
  id          String   @id @default(uuid())
  name        String
  description String?
  tags        String[]
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model ProjectMembership {
  id        String   @id @default(uuid())
  joinedAt  DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Room {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  tags        String[]
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
}

model Job {
  id              String   @id @default(uuid())
  name            String
  location        String
  logo            String
  batches         String[]
  role            String
  roledescription Json?
  jobtype         JobType
  salary          String?
  link            String
  duration        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

enum JobType {
  Intern
  FullTime
  Contract
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TypeOfVote {
  UP
  DOWN
}

enum CategoryTypes {
  frontend
  backend
  devops
}

enum Role {
  USER
  ADMIN
}

// Add the TaskStatus enum here
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
